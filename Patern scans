#include <basetsd.h>
#include <winnt.h>
#include <minwindef.h>
#include <memoryapi.h>
char* ScanHelper(char* pattern, char* mask, char* begin, unsigned int size)
{
    unsigned int patternLength = strlen(mask);

    for (unsigned int i = 0; i < size - patternLength; i++)
    {
        bool found = true;
        for (unsigned int j = 0; j < patternLength; j++)
        {
            if (mask[j] != '?' && pattern[j] != *(begin + i + j))
            {
                found = false;
                break;
            }
        }
        if (found)
        {
            return (begin + i);
        }
    }
    return nullptr;
}
char* Scan(char* pattern, char* mask, char* begin, char* end, HANDLE hProc)
{
    char* match = nullptr;
    SIZE_T bytesRead;
    DWORD oldprotect;
    char* buffer = nullptr;
    MEMORY_BASIC_INFORMATION mbi = { 0 };

    char* curr = begin;

    for (char* curr = begin; curr < end; curr += mbi.RegionSize)
    {
        if (!VirtualQueryEx(hProc, curr, &mbi, sizeof(mbi))) return nullptr;
        if (mbi.State != MEM_COMMIT || mbi.Protect == PAGE_NOACCESS) continue;

        buffer = new char[mbi.RegionSize];

        if (VirtualProtectEx(hProc, mbi.BaseAddress, mbi.RegionSize, PAGE_EXECUTE_READWRITE, &oldprotect))
        {
            ReadProcessMemory(hProc, mbi.BaseAddress, buffer, mbi.RegionSize, &bytesRead);
            VirtualProtectEx(hProc, mbi.BaseAddress, mbi.RegionSize, oldprotect, &oldprotect);

            char* internalAddr = ScanHelper(pattern, mask, buffer, (unsigned int)bytesRead);

            if (internalAddr != nullptr)
            {
                match = curr + (uintptr_t)(internalAddr - buffer);
                break;
            }
        }
    }
    delete[] buffer;
    return (char*)match;
}
